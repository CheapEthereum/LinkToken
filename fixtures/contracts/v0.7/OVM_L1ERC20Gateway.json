{
	"schemaVersion": "2.0.0",
	"contractName": "OVM_L1ERC20Gateway",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract iOVM_ERC20",
						"name": "_l1ERC20",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_l2DepositedERC20",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_l1messenger",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "DepositInitiated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "WithdrawalFinalized",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_FINALIZE_DEPOSIT_L2_GAS",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "depositTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "depositToUnsafe",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "finalizeWithdrawal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFinalizeDepositL2Gas",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "l1ERC20",
				"outputs": [
					{
						"internalType": "contract iOVM_ERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "l2DepositedToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "messenger",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "The L1 ERC20 Gateway is a contract which stores deposited L1 funds that are in use on L2. It synchronizes a corresponding L2 ERC20 Gateway, informing it of deposits, and listening to it for newly finalized withdrawals. NOTE: This contract extends Abs_L1TokenGateway, which is where we takes care of most of the initialization and the cross-chain logic. If you are looking to implement your own deposit/withdrawal contracts, you may also want to extend the abstract contract in a similar manner. Compiler used: solc Runtime target: EVM",
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_l1ERC20": "L1 ERC20 address this contract stores deposits for",
						"_l2DepositedERC20": "L2 Gateway address on the chain being deposited into"
					}
				},
				"deposit(uint256)": {
					"details": "deposit an amount of the ERC20 to the caller's balance on L2",
					"params": {
						"_amount": "Amount of the ERC20 to deposit"
					}
				},
				"depositTo(address,uint256)": {
					"details": "deposit an amount of ERC20 to a recipients's balance on L2",
					"params": {
						"_amount": "Amount of the ERC20 to deposit",
						"_to": "L2 address to credit the withdrawal to"
					}
				},
				"depositToUnsafe(address,uint256)": {
					"details": "deposit an amount of ERC20 to a recipients's balance on L2 WARNING: This is a potentially unsafe operation that could end up with lost tokens, if tokens are sent to a contract. Be careful!",
					"params": {
						"_amount": "Amount of the ERC20 to deposit",
						"_to": "L2 address to credit the withdrawal to"
					}
				},
				"finalizeWithdrawal(address,uint256)": {
					"details": "Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the  L1 ERC20 token.  This call will fail if the initialized withdrawal from L2 has not been finalized. ",
					"params": {
						"_amount": "Amount of the ERC20 to withdraw",
						"_to": "L1 address to credit the withdrawal to"
					}
				},
				"getFinalizeDepositL2Gas()": {
					"details": "Overridable getter for the L2 gas limit, in the case it may be dynamic, and the above public constant does not suffice."
				}
			},
			"title": "OVM_L1ERC20Gateway",
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x60806040526001805463ffffffff60a01b191661249f60a71b17905534801561002757600080fd5b5060405161091f38038061091f83398101604081905261004691610094565b60008054610100600160a81b0319166101006001600160a01b0393841602179055600180546001600160a01b03199081169383169390931790556002805490921692169190911790556100f8565b6000806000606084860312156100a8578283fd5b83516100b3816100e0565b60208501519093506100c4816100e0565b60408501519092506100d5816100e0565b809150509250925092565b6001600160a01b03811681146100f557600080fd5b50565b610818806101076000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639423169b116100665780639423169b146100db578063b6b55f25146100e3578063bbde534b146100f8578063f4f7b41a1461010b578063ffaad6a51461011e57610093565b80630439f40b146100985780631273a090146100b657806332b5e32e146100cb5780633cb747bf146100d3575b600080fd5b6100a0610131565b6040516100ad91906106e2565b60405180910390f35b6100be610140565b6040516100ad9190610773565b6100a0610153565b6100a0610162565b6100be610176565b6100f66100f13660046106ca565b610189565b005b6100f661010636600461066d565b610197565b6100f661011936600461066d565b6101d0565b6100f661012c36600461066d565b61033e565b6001546001600160a01b031681565b600154600160a01b900463ffffffff1690565b6002546001600160a01b031681565b60005461010090046001600160a01b031681565b600154600160a01b900463ffffffff1681565b61019433338361034d565b50565b60005460ff16806101b0576000805460ff191660011790555b6101bb33848461034d565b806101cb576000805460ff191690555b505050565b6001546001600160a01b03166101e4610411565b6001600160a01b0316336001600160a01b0316146102335760405162461bcd60e51b815260040180806020018281038252602e815260200180610785602e913960400191505060405180910390fd5b806001600160a01b0316610245610411565b6001600160a01b0316636e296e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d60208110156102a757600080fd5b50516001600160a01b0316146102ee5760405162461bcd60e51b81526004018080602001828103825260308152602001806107b36030913960400191505060405180910390fd5b6102f88383610425565b826001600160a01b03167f9e5c4f9f4e46b8629d3dda85f43a69194f50254404a72dc62b9e932d9c94eda883604051610331919061076a565b60405180910390a2505050565b61034933838361034d565b5050565b6103588383836104a9565b6000638d6e9a5b60e01b838360405160240161037592919061071a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001549091506103c8906001600160a01b0316826103c3610140565b610573565b836001600160a01b03167ff531653a5819e21265de50358610d55dbe6594c61605b209dfa4280d277938c1848460405161040392919061071a565b60405180910390a250505050565b60005461010090046001600160a01b031690565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610457908590859060040161071a565b602060405180830381600087803b15801561047157600080fd5b505af1158015610485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cb91906106a3565b6104b161065e565b806104c257506104c082610667565b155b6104e75760405162461bcd60e51b81526004016104de90610733565b60405180910390fd5b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061051b908690309086906004016106f6565b602060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d91906106a3565b50505050565b61057b610411565b6001600160a01b0316633dbb202b8484846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156105f35781810151838201526020016105db565b50505050905090810190601f1680156106205780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b50505050505050565b60005460ff1690565b3b151590565b6000806040838503121561067f578182fd5b82356001600160a01b0381168114610695578283fd5b946020939093013593505050565b6000602082840312156106b4578081fd5b815180151581146106c3578182fd5b9392505050565b6000602082840312156106db578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252601a908201527f556e73616665206465706f73697420746f20636f6e7472616374000000000000604082015260600190565b90815260200190565b63ffffffff9190911681526020019056fe4f564d5f58434841494e3a206d657373656e67657220636f6e747261637420756e61757468656e746963617465644f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f73732d646f6d61696e206d657373616765a264697066735822122082ddae6b6128911872a8826b2564fd9e792398a83908782b46dee3d65844a88964736f6c63430007060033",
				"sourceMap": "1239:2406:4:-:0;;;1964:55:18;;;-1:-1:-1;;;;1964:55:18;-1:-1:-1;;;1964:55:18;;;1670:214:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;695:9:24;:22;;-1:-1:-1;;;;;;695:22:24;;-1:-1:-1;;;;;695:22:24;;;;;;;-1:-1:-1;1716:36:18;;-1:-1:-1;;;;;;1716:36:18;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;1861:7:4::1;:18:::0;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;1239:2406;;14:554:31;;;;190:2;178:9;169:7;165:23;161:32;158:2;;;211:6;203;196:22;158:2;248:9;242:16;267:33;294:5;267:33;:::i;:::-;369:2;354:18;;348:25;319:5;;-1:-1:-1;382:35:31;348:25;382:35;:::i;:::-;488:2;473:18;;467:25;436:7;;-1:-1:-1;501:35:31;467:25;501:35;:::i;:::-;555:7;545:17;;;148:420;;;;;:::o;573:133::-;-1:-1:-1;;;;;650:31:31;;640:42;;630:2;;696:1;693;686:12;630:2;620:86;:::o;:::-;1239:2406:4;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80639423169b116100665780639423169b146100db578063b6b55f25146100e3578063bbde534b146100f8578063f4f7b41a1461010b578063ffaad6a51461011e57610093565b80630439f40b146100985780631273a090146100b657806332b5e32e146100cb5780633cb747bf146100d3575b600080fd5b6100a0610131565b6040516100ad91906106e2565b60405180910390f35b6100be610140565b6040516100ad9190610773565b6100a0610153565b6100a0610162565b6100be610176565b6100f66100f13660046106ca565b610189565b005b6100f661010636600461066d565b610197565b6100f661011936600461066d565b6101d0565b6100f661012c36600461066d565b61033e565b6001546001600160a01b031681565b600154600160a01b900463ffffffff1690565b6002546001600160a01b031681565b60005461010090046001600160a01b031681565b600154600160a01b900463ffffffff1681565b61019433338361034d565b50565b60005460ff16806101b0576000805460ff191660011790555b6101bb33848461034d565b806101cb576000805460ff191690555b505050565b6001546001600160a01b03166101e4610411565b6001600160a01b0316336001600160a01b0316146102335760405162461bcd60e51b815260040180806020018281038252602e815260200180610785602e913960400191505060405180910390fd5b806001600160a01b0316610245610411565b6001600160a01b0316636e296e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d60208110156102a757600080fd5b50516001600160a01b0316146102ee5760405162461bcd60e51b81526004018080602001828103825260308152602001806107b36030913960400191505060405180910390fd5b6102f88383610425565b826001600160a01b03167f9e5c4f9f4e46b8629d3dda85f43a69194f50254404a72dc62b9e932d9c94eda883604051610331919061076a565b60405180910390a2505050565b61034933838361034d565b5050565b6103588383836104a9565b6000638d6e9a5b60e01b838360405160240161037592919061071a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001549091506103c8906001600160a01b0316826103c3610140565b610573565b836001600160a01b03167ff531653a5819e21265de50358610d55dbe6594c61605b209dfa4280d277938c1848460405161040392919061071a565b60405180910390a250505050565b60005461010090046001600160a01b031690565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610457908590859060040161071a565b602060405180830381600087803b15801561047157600080fd5b505af1158015610485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cb91906106a3565b6104b161065e565b806104c257506104c082610667565b155b6104e75760405162461bcd60e51b81526004016104de90610733565b60405180910390fd5b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061051b908690309086906004016106f6565b602060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d91906106a3565b50505050565b61057b610411565b6001600160a01b0316633dbb202b8484846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156105f35781810151838201526020016105db565b50505050905090810190601f1680156106205780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b50505050505050565b60005460ff1690565b3b151590565b6000806040838503121561067f578182fd5b82356001600160a01b0381168114610695578283fd5b946020939093013593505050565b6000602082840312156106b4578081fd5b815180151581146106c3578182fd5b9392505050565b6000602082840312156106db578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252601a908201527f556e73616665206465706f73697420746f20636f6e7472616374000000000000604082015260600190565b90815260200190565b63ffffffff9190911681526020019056fe4f564d5f58434841494e3a206d657373656e67657220636f6e747261637420756e61757468656e746963617465644f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f73732d646f6d61696e206d657373616765a264697066735822122082ddae6b6128911872a8826b2564fd9e792398a83908782b46dee3d65844a88964736f6c63430007060033",
				"sourceMap": "1239:2406:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1255:31:18;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3182:168;;;:::i;:::-;;;;;;;:::i;1414:25:4:-;;;:::i;540:24:24:-;;;:::i;1964:55:18:-;;;:::i;3560:147::-;;;;;;:::i;:::-;;:::i;:::-;;2277:143:4;;;;;;:::i;:::-;;:::i;5657:390:18:-;;;;;;:::i;:::-;;:::i;3910:163::-;;;;;;:::i;:::-;;:::i;1255:31::-;;;-1:-1:-1;;;;;1255:31:18;;:::o;3182:168::-;3312:31;;-1:-1:-1;;;3312:31:18;;;;;3182:168::o;1414:25:4:-;;;-1:-1:-1;;;;;1414:25:4;;:::o;540:24:24:-;;;;;;-1:-1:-1;;;;;540:24:24;;:::o;1964:55:18:-;;;-1:-1:-1;;;1964:55:18;;;;;:::o;3560:147::-;3651:49;3668:10;3680;3692:7;3651:16;:49::i;:::-;3560:147;:::o;2277:143:4:-;725:18:6;746:8;;;;815:50;;843:8;:15;;-1:-1:-1;;843:15:6;854:4;843:15;;;815:50;2373:42:4::1;2390:10;2402:3;2407:7;2373:16;:42::i;:::-;936:13:6::0;931:51;;970:5;959:16;;-1:-1:-1;;959:16:6;;;931:51;2277:143:4;;;:::o;5657:390:18:-;5804:16;;-1:-1:-1;;;;;5804:16:18;1193:25:24;:23;:25::i;:::-;-1:-1:-1;;;;;1171:48:24;:10;-1:-1:-1;;;;;1171:48:24;;1150:141;;;;-1:-1:-1;;;1150:141:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1375:20;-1:-1:-1;;;;;1323:72:24;:25;:23;:25::i;:::-;-1:-1:-1;;;;;1323:46:24;;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1323:48:24;-1:-1:-1;;;;;1323:72:24;;1302:167;;;;-1:-1:-1;;;1302:167:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5918:73:18::1;5957:3;5974:7;5918:25;:73::i;:::-;6027:3;-1:-1:-1::0;;;;;6007:33:18::1;;6032:7;6007:33;;;;;;:::i;:::-;;;;;;;;5657:390:::0;;;:::o;3910:163::-;4024:42;4041:10;4053:3;4058:7;4024:16;:42::i;:::-;3910:163;;:::o;4445:762::-;4653:89;4689:5;4708:3;4725:7;4653:22;:89::i;:::-;4834:17;4890:46;;;4950:3;4967:7;4854:130;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4854:130:18;;;;;;;;;;;;;;-1:-1:-1;;;;;4854:130:18;-1:-1:-1;;;;;;4854:130:18;;;;;;;;;;5064:16;;4854:130;;-1:-1:-1;5028:119:18;;-1:-1:-1;;;;;5064:16:18;4854:130;5112:25;:23;:25::i;:::-;5028:22;:119::i;:::-;5180:5;-1:-1:-1;;;;;5163:37:18;;5187:3;5192:7;5163:37;;;;;;;:::i;:::-;;;;;;;;4445:762;;;;:::o;1816:205:24:-;1913:29;2004:9;;;;-1:-1:-1;;;;;2004:9:24;;1816:205::o;3450:193:4:-;3608:7;;:30;;-1:-1:-1;;;3608:30:4;;-1:-1:-1;;;;;3608:7:4;;;;:16;;:30;;3625:3;;3630:7;;3608:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2783:432::-;3014:11;:9;:11::i;:::-;:39;;;;3030:23;3049:3;3030:18;:23::i;:::-;3029:24;3014:39;3006:78;;;;-1:-1:-1;;;3006:78:4;;;;;;;:::i;:::-;;;;;;;;;3135:7;;:75;;-1:-1:-1;;;3135:75:4;;-1:-1:-1;;;;;3135:7:4;;;;:20;;:75;;3163:5;;3184:4;;3197:7;;3135:75;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2783:432;;;:::o;2398:229:24:-;2545:25;:23;:25::i;:::-;-1:-1:-1;;;;;2545:37:24;;2583:18;2603:5;2610:9;2545:75;;;;;;;;;;;;;-1:-1:-1;;;;;2545:75:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2398:229;;;:::o;1197:90:6:-;1253:4;1274:8;;;1197:90;:::o;726:413:28:-;1086:20;1124:8;;;726:413::o;14:374:31:-;;;143:2;131:9;122:7;118:23;114:32;111:2;;;164:6;156;149:22;111:2;195:23;;-1:-1:-1;;;;;247:31:31;;237:42;;227:2;;298:6;290;283:22;227:2;326:5;378:2;363:18;;;;350:32;;-1:-1:-1;;;101:287:31:o;393:297::-;;513:2;501:9;492:7;488:23;484:32;481:2;;;534:6;526;519:22;481:2;571:9;565:16;624:5;617:13;610:21;603:5;600:32;590:2;;651:6;643;636:22;590:2;679:5;471:219;-1:-1:-1;;;471:219:31:o;695:190::-;;807:2;795:9;786:7;782:23;778:32;775:2;;;828:6;820;813:22;775:2;-1:-1:-1;856:23:31;;765:120;-1:-1:-1;765:120:31:o;890:203::-;-1:-1:-1;;;;;1054:32:31;;;;1036:51;;1024:2;1009:18;;991:102::o;1098:375::-;-1:-1:-1;;;;;1356:15:31;;;1338:34;;1408:15;;;;1403:2;1388:18;;1381:43;1455:2;1440:18;;1433:34;;;;1288:2;1273:18;;1255:218::o;1478:274::-;-1:-1:-1;;;;;1670:32:31;;;;1652:51;;1734:2;1719:18;;1712:34;1640:2;1625:18;;1607:145::o;1984:350::-;2186:2;2168:21;;;2225:2;2205:18;;;2198:30;2264:28;2259:2;2244:18;;2237:56;2325:2;2310:18;;2158:176::o;2339:177::-;2485:25;;;2473:2;2458:18;;2440:76::o;2521:192::-;2695:10;2683:23;;;;2665:42;;2653:2;2638:18;;2620:93::o"
			},
			"methodIdentifiers": {
				"DEFAULT_FINALIZE_DEPOSIT_L2_GAS()": "9423169b",
				"deposit(uint256)": "b6b55f25",
				"depositTo(address,uint256)": "ffaad6a5",
				"depositToUnsafe(address,uint256)": "bbde534b",
				"finalizeWithdrawal(address,uint256)": "f4f7b41a",
				"getFinalizeDepositL2Gas()": "1273a090",
				"l1ERC20()": "32b5e32e",
				"l2DepositedToken()": "0439f40b",
				"messenger()": "3cb747bf"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract iOVM_ERC20\",\"name\":\"_l1ERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2DepositedERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_FINALIZE_DEPOSIT_L2_GAS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToUnsafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finalizeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalizeDepositL2Gas\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ERC20\",\"outputs\":[{\"internalType\":\"contract iOVM_ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2DepositedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The L1 ERC20 Gateway is a contract which stores deposited L1 funds that are in use on L2. It synchronizes a corresponding L2 ERC20 Gateway, informing it of deposits, and listening to it for newly finalized withdrawals. NOTE: This contract extends Abs_L1TokenGateway, which is where we takes care of most of the initialization and the cross-chain logic. If you are looking to implement your own deposit/withdrawal contracts, you may also want to extend the abstract contract in a similar manner. Compiler used: solc Runtime target: EVM\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1ERC20\":\"L1 ERC20 address this contract stores deposits for\",\"_l2DepositedERC20\":\"L2 Gateway address on the chain being deposited into\"}},\"deposit(uint256)\":{\"details\":\"deposit an amount of the ERC20 to the caller's balance on L2\",\"params\":{\"_amount\":\"Amount of the ERC20 to deposit\"}},\"depositTo(address,uint256)\":{\"details\":\"deposit an amount of ERC20 to a recipients's balance on L2\",\"params\":{\"_amount\":\"Amount of the ERC20 to deposit\",\"_to\":\"L2 address to credit the withdrawal to\"}},\"depositToUnsafe(address,uint256)\":{\"details\":\"deposit an amount of ERC20 to a recipients's balance on L2 WARNING: This is a potentially unsafe operation that could end up with lost tokens, if tokens are sent to a contract. Be careful!\",\"params\":{\"_amount\":\"Amount of the ERC20 to deposit\",\"_to\":\"L2 address to credit the withdrawal to\"}},\"finalizeWithdrawal(address,uint256)\":{\"details\":\"Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the  L1 ERC20 token.  This call will fail if the initialized withdrawal from L2 has not been finalized. \",\"params\":{\"_amount\":\"Amount of the ERC20 to withdraw\",\"_to\":\"L1 address to credit the withdrawal to\"}},\"getFinalizeDepositL2Gas()\":{\"details\":\"Overridable getter for the L2 gas limit, in the case it may be dynamic, and the above public constant does not suffice.\"}},\"title\":\"OVM_L1ERC20Gateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/contracts/v0.7/bridge/optimism/OVM_L1ERC20Gateway.sol\":\"OVM_L1ERC20Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts=/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@chainlink/contracts\",\":@eth-optimism/contracts=/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts\",\":@openzeppelin/contracts=/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@openzeppelin/contracts\"]},\"sources\":{\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/contracts/v0.7/bridge/optimism/OVM_L1ERC20Gateway.sol\":{\"keccak256\":\"0x5537ceb7479d6e6444c7232a5461fe4e568101362a784315da900aa4a739aa12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd97d5b60a0d65775027c1c805a9b4464fc5474b97ec3b225ff514eefcbc4bbe\",\"dweb:/ipfs/QmWwf4m5Xy3zyUULUbCiA6r7bPYjMx7aYzJjTRh9miMd7Z\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/contracts/v0.7/bridge/utils/OpUnsafe.sol\":{\"keccak256\":\"0x9bf1325df7c1d76cefab6e611c6cbf79553b8f6c45d0c1064735cf64fd2d7403\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://94a9b883ae0e46247236a146b8995b7825a9d319579b7340493422b4f206ab3d\",\"dweb:/ipfs/QmW5qyFmC4QuNh3EqhFMQJm6tuFi7wZYKjaX7XxyZsicnQ\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L1TokenGateway.sol\":{\"keccak256\":\"0xd7403fed1cab3089e669b61a8d3bb81ff1601a8890c06bb0dbd881592b941e68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f180588c74f3640e06950cb07e7e311f76739e4a0dc56fce5f6413fb1c5700c\",\"dweb:/ipfs/QmV8tYPK5hZThANHXV1KpjPqMLXk9UtADB6hNxEcPjmEf2\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts/build/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\":{\"keccak256\":\"0xc2bd6b373daae2ede34281f4be5938d02b9d1cfb056b40d65ff70b7f16ce3c86\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ba1205473638ac74ac4bed9d7054089a7f5392cb3d374360e28c72f21820928\",\"dweb:/ipfs/QmdMCgFRurvz3mimV7PPoYHn82mAtdbX3dpW4wTM57Ho3b\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\":{\"keccak256\":\"0xc5503d644d170daa5b46a1228f5c73ef6d068226a2b2acc62d41df00c36b900e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f6d2aee85374b74f57c3878cf42bb0aa78f6f6cc10cd5570d91c7be20a6be42\",\"dweb:/ipfs/QmUHav1v5ukXhhrgPxjZywj3dtTQqHuEkDKTJfbDWZsaAk\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\":{\"keccak256\":\"0xaa874355e98c444a58712179acaf5ca344296dfa8229577a38a1d14160ce46f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf5ffbd9f213f223dbd3ce691b64f741828ad637122097b87a77accbcd8d3f10\",\"dweb:/ipfs/QmUfzke5N7R56VANyVwsHoNeKXShYc7oGHXhEbMJBLzWzK\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts/build/contracts/iOVM/precompiles/iOVM_ERC20.sol\":{\"keccak256\":\"0x19917cf9b071ddd83bfe5043f1e09c25a7e941d99c5b6bea5375be1d6d809e0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60b677903482c858c199ef9bb76f3d22766c82a708559c4c9d8df92bc70d23d1\",\"dweb:/ipfs/QmVFhhWGpgBpGK6kd78sxJNkS7fJ2UKp26rzXvXxh4q3Zj\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts/build/contracts/libraries/bridge/OVM_CrossDomainEnabled.sol\":{\"keccak256\":\"0x1b1c5adbb359f3f46ca9e43b366a80563c031560e9f1f24ab4742b2d79403ce7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8f5dfa00a4d4d621b1dda7248f48e97cc7f4ac5bc43978a0fb01c2249e96381\",\"dweb:/ipfs/QmVjVhDZBmU59b3e6Wh2bBwUzWeWme7exqEp4MKLtgRmbD\"]},\"/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"sources": {
		"bridge/optimism/OVM_L1ERC20Gateway.sol": {
			"id": 4
		},
		"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol": {
			"id": 21
		},
		"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L1TokenGateway.sol": {
			"id": 18
		},
		"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L2DepositedToken.sol": {
			"id": 22
		},
		"@eth-optimism/contracts/build/contracts/libraries/bridge/OVM_CrossDomainEnabled.sol": {
			"id": 24
		},
		"@eth-optimism/contracts/build/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol": {
			"id": 20
		},
		"@eth-optimism/contracts/build/contracts/iOVM/precompiles/iOVM_ERC20.sol": {
			"id": 23
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"id": 28
		},
		"bridge/utils/OpUnsafe.sol": {
			"id": 6
		}
	},
	"sourceCodes": {
		"bridge/optimism/OVM_L1ERC20Gateway.sol": "// SPDX-License-Identifier: MIT\n// @unsupported: ovm\npragma solidity >0.5.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n/* Interface Imports */\nimport { iOVM_L1TokenGateway } from \"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\";\nimport { Abs_L1TokenGateway } from \"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L1TokenGateway.sol\";\nimport { iOVM_ERC20 } from \"@eth-optimism/contracts/build/contracts/iOVM/precompiles/iOVM_ERC20.sol\";\n\n/* Library Imports */\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { OpUnsafe } from \"../utils/OpUnsafe.sol\";\n\n/**\n * @title OVM_L1ERC20Gateway\n * @dev The L1 ERC20 Gateway is a contract which stores deposited L1 funds that are in use on L2.\n * It synchronizes a corresponding L2 ERC20 Gateway, informing it of deposits, and listening to it\n * for newly finalized withdrawals.\n *\n * NOTE: This contract extends Abs_L1TokenGateway, which is where we\n * takes care of most of the initialization and the cross-chain logic.\n * If you are looking to implement your own deposit/withdrawal contracts, you\n * may also want to extend the abstract contract in a similar manner.\n *\n * Compiler used: solc\n * Runtime target: EVM\n */\ncontract OVM_L1ERC20Gateway is OpUnsafe, Abs_L1TokenGateway {\n\n  /********************************\n   * External Contract References *\n   ********************************/\n\n  iOVM_ERC20 public l1ERC20;\n\n  /***************\n   * Constructor *\n   ***************/\n\n  /**\n   * @param _l1ERC20 L1 ERC20 address this contract stores deposits for\n   * @param _l2DepositedERC20 L2 Gateway address on the chain being deposited into\n   */\n  constructor(\n    iOVM_ERC20 _l1ERC20,\n    address _l2DepositedERC20,\n    address _l1messenger\n  )\n    public\n    Abs_L1TokenGateway(\n      _l2DepositedERC20,\n      _l1messenger\n    )\n  {\n    l1ERC20 = _l1ERC20;\n  }\n\n\n  /**************\n   * Depositing *\n   **************/\n\n  /**\n   * @dev deposit an amount of ERC20 to a recipients's balance on L2\n   * WARNING: This is a potentially unsafe operation that could end up with lost tokens,\n   * if tokens are sent to a contract. Be careful!\n   *\n   * @param _to L2 address to credit the withdrawal to\n   * @param _amount Amount of the ERC20 to deposit\n   */\n  function depositToUnsafe(\n    address _to,\n    uint _amount\n  )\n    public\n    unsafe()\n  {\n    _initiateDeposit(msg.sender, _to, _amount);\n  }\n\n\n  /**************\n   * Accounting *\n   **************/\n\n  /**\n   * @dev When a deposit is initiated on L1, the L1 Gateway\n   * transfers the funds to itself for future withdrawals\n   *\n   * @param _from L1 address ERC20 is being deposited from\n   * @param _to L2 address that the ERC20 is being deposited to\n   * @param _amount Amount of ERC20 to send\n   */\n  function _handleInitiateDeposit(\n    address _from,\n    address _to,\n    uint256 _amount\n  )\n    internal\n    override\n  {\n    // Unless explicitly unsafe op, stop deposits to contracts (avoid accidentally lost tokens)\n    require(_isUnsafe() || !Address.isContract(_to), \"Unsafe deposit to contract\");\n\n    // Hold on to the newly deposited funds\n    l1ERC20.transferFrom(\n      _from,\n      address(this),\n      _amount\n    );\n  }\n\n  /**\n   * @dev When a withdrawal is finalized on L1, the L1 Gateway\n   * transfers the funds to the withdrawer\n   *\n   * @param _to L1 address that the ERC20 is being withdrawn to\n   * @param _amount Amount of ERC20 to send\n   */\n  function _handleFinalizeWithdrawal(\n    address _to,\n    uint _amount\n  )\n    internal\n    override\n  {\n    // Transfer withdrawn funds out to withdrawer\n    l1ERC20.transfer(_to, _amount);\n  }\n}\n",
		"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iOVM_L1TokenGateway\n */\ninterface iOVM_L1TokenGateway {\n\n    /**********\n     * Events *\n     **********/\n\n    event DepositInitiated(\n        address indexed _from,\n        address _to,\n        uint256 _amount\n    );\n  \n    event WithdrawalFinalized(\n        address indexed _to,\n        uint256 _amount\n    );\n\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    function deposit(\n        uint _amount\n    )\n        external;\n\n    function depositTo(\n        address _to,\n        uint _amount\n    )\n        external;\n\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    function finalizeWithdrawal(\n        address _to,\n        uint _amount\n    )\n        external;\n}\n",
		"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L1TokenGateway.sol": "// SPDX-License-Identifier: MIT\n// @unsupported: ovm \npragma solidity >0.5.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n/* Interface Imports */\nimport { iOVM_L1TokenGateway } from \"../../../iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\";\nimport { iOVM_L2DepositedToken } from \"../../../iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\";\n\n/* Library Imports */\nimport { OVM_CrossDomainEnabled } from \"../../../libraries/bridge/OVM_CrossDomainEnabled.sol\";\n\n/**\n * @title Abs_L1TokenGateway\n * @dev An L1 Token Gateway is a contract which stores deposited L1 funds that are in use on L2.\n * It synchronizes a corresponding L2 representation of the \"deposited token\", informing it\n * of new deposits and releasing L1 funds when there are newly finalized withdrawals.\n *\n * NOTE: This abstract contract gives all the core functionality of an L1 token gateway, \n * but provides easy hooks in case developers need extensions in child contracts.\n * In many cases, the default OVM_L1ERC20Gateway will suffice.\n *\n * Compiler used: solc\n * Runtime target: EVM\n */\nabstract contract Abs_L1TokenGateway is iOVM_L1TokenGateway, OVM_CrossDomainEnabled {\n\n    /********************************\n     * External Contract References *\n     ********************************/\n\n    address public l2DepositedToken;\n\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _l2DepositedToken iOVM_L2DepositedToken-compatible address on the chain being deposited into.\n     * @param _l1messenger L1 Messenger address being used for cross-chain communications.\n     */\n    constructor(\n        address _l2DepositedToken,\n        address _l1messenger \n    )\n        OVM_CrossDomainEnabled(_l1messenger)\n    {\n        l2DepositedToken = _l2DepositedToken;\n    }\n\n    /********************************\n     * Overridable Accounting logic *\n     ********************************/\n\n    // Default gas value which can be overridden if more complex logic runs on L2.\n    uint32 public DEFAULT_FINALIZE_DEPOSIT_L2_GAS = 1200000;\n\n    /**\n     * @dev Core logic to be performed when a withdrawal is finalized on L1.\n     * In most cases, this will simply send locked funds to the withdrawer.\n     *\n     * @param _to Address being withdrawn to.\n     * @param _amount Amount being withdrawn.\n     */\n    function _handleFinalizeWithdrawal(\n        address _to,\n        uint256 _amount\n    )\n        internal\n        virtual\n    {\n        revert(\"Implement me in child contracts\");\n    }\n\n    /**\n     * @dev Core logic to be performed when a deposit is initiated on L1.\n     * In most cases, this will simply send locked funds to the withdrawer.\n     *\n     * @param _from Address being deposited from on L1.\n     * @param _to Address being deposited into on L2.\n     * @param _amount Amount being deposited.\n     */\n    function _handleInitiateDeposit(\n        address _from,\n        address _to,\n        uint256 _amount\n    )\n        internal\n        virtual\n    {\n        revert(\"Implement me in child contracts\");\n    }\n\n    /**\n     * @dev Overridable getter for the L2 gas limit, in the case it may be\n     * dynamic, and the above public constant does not suffice.\n     *\n     */\n\n    function getFinalizeDepositL2Gas()\n        public\n        view\n        returns(\n            uint32\n        )\n    {\n        return DEFAULT_FINALIZE_DEPOSIT_L2_GAS;\n    }\n\n    /**************\n     * Depositing *\n     **************/\n\n    /**\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2\n     * @param _amount Amount of the ERC20 to deposit\n     */\n    function deposit(\n        uint _amount\n    )\n        public\n        override\n    {\n        _initiateDeposit(msg.sender, msg.sender, _amount);\n    }\n\n    /**\n     * @dev deposit an amount of ERC20 to a recipients's balance on L2\n     * @param _to L2 address to credit the withdrawal to\n     * @param _amount Amount of the ERC20 to deposit\n     */\n    function depositTo(\n        address _to,\n        uint _amount\n    )\n        public\n        override\n    {\n        _initiateDeposit(msg.sender, _to, _amount);\n    }\n\n    /**\n     * @dev Performs the logic for deposits by informing the L2 Deposited Token\n     * contract of the deposit and calling a handler to lock the L1 funds. (e.g. transferFrom)\n     *\n     * @param _from Account to pull the deposit from on L1\n     * @param _to Account to give the deposit to on L2\n     * @param _amount Amount of the ERC20 to deposit.\n     */\n    function _initiateDeposit(\n        address _from,\n        address _to,\n        uint _amount\n    )\n        internal\n    {\n        // Call our deposit accounting handler implemented by child contracts.\n        _handleInitiateDeposit(\n            _from,\n            _to,\n            _amount\n        );\n\n        // Construct calldata for l2DepositedToken.finalizeDeposit(_to, _amount)\n        bytes memory data = abi.encodeWithSelector(\n            iOVM_L2DepositedToken.finalizeDeposit.selector,\n            _to,\n            _amount\n        );\n\n        // Send calldata into L2\n        sendCrossDomainMessage(\n            l2DepositedToken,\n            data,\n            getFinalizeDepositL2Gas()\n        );\n\n        emit DepositInitiated(_from, _to, _amount);\n    }\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the \n     * L1 ERC20 token. \n     * This call will fail if the initialized withdrawal from L2 has not been finalized. \n     *\n     * @param _to L1 address to credit the withdrawal to\n     * @param _amount Amount of the ERC20 to withdraw\n     */\n    function finalizeWithdrawal(\n        address _to,\n        uint _amount\n    )\n        external\n        override \n        onlyFromCrossDomainAccount(l2DepositedToken)\n    {\n        // Call our withdrawal accounting handler implemented by child contracts.\n        _handleFinalizeWithdrawal(\n            _to,\n            _amount\n        );\n\n        emit WithdrawalFinalized(_to, _amount);\n    }\n}\n",
		"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L2DepositedToken.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iOVM_L2DepositedToken\n */\ninterface iOVM_L2DepositedToken {\n\n    /**********\n     * Events *\n     **********/\n\n    event WithdrawalInitiated(\n        address indexed _from,\n        address _to,\n        uint256 _amount\n    );\n\n    event DepositFinalized(\n        address indexed _to,\n        uint256 _amount\n    );    \n\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    function withdraw(\n        uint _amount\n    )\n        external;\n\n    function withdrawTo(\n        address _to,\n        uint _amount\n    )\n        external;\n\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    function finalizeDeposit(\n        address _to,\n        uint _amount\n    )\n        external;\n}\n",
		"@eth-optimism/contracts/build/contracts/libraries/bridge/OVM_CrossDomainEnabled.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\n/* Interface Imports */\nimport { iAbs_BaseCrossDomainMessenger } from \"../../iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\";\n\n/**\n * @title OVM_CrossDomainEnabled\n * @dev Helper contract for contracts performing cross-domain communications\n *\n * Compiler used: defined by inheriting contract\n * Runtime target: defined by inheriting contract\n */\ncontract OVM_CrossDomainEnabled {\n    // Messenger contract used to send and recieve messages from the other domain.\n    address public messenger;\n\n    /***************\n     * Constructor *\n     ***************/    \n    constructor(\n        address _messenger\n    ) {\n        messenger = _messenger;\n    }\n\n    /**********************\n     * Function Modifiers *\n     **********************/\n\n    /**\n     * @notice Enforces that the modified function is only callable by a specific cross-domain account.\n     * @param _sourceDomainAccount The only account on the originating domain which is authenticated to call this function.\n     */\n    modifier onlyFromCrossDomainAccount(\n        address _sourceDomainAccount\n    ) {\n        require(\n            msg.sender == address(getCrossDomainMessenger()),\n            \"OVM_XCHAIN: messenger contract unauthenticated\"\n        );\n\n        require(\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\n            \"OVM_XCHAIN: wrong sender of cross-domain message\"\n        );\n\n        _;\n    }\n    \n    /**********************\n     * Internal Functions *\n     **********************/\n\n    /**\n     * @notice Gets the messenger, usually from storage.  This function is exposed in case a child contract needs to override.\n     * @return The address of the cross-domain messenger contract which should be used. \n     */\n    function getCrossDomainMessenger()\n        internal\n        virtual\n        returns(\n            iAbs_BaseCrossDomainMessenger\n        )\n    {\n        return iAbs_BaseCrossDomainMessenger(messenger);\n    }\n\n    /**\n     * @notice Sends a message to an account on another domain\n     * @param _crossDomainTarget The intended recipient on the destination domain\n     * @param _data The data to send to the target (usually calldata to a function with `onlyFromCrossDomainAccount()`)\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\n     */\n    function sendCrossDomainMessage(\n        address _crossDomainTarget,\n        bytes memory _data,\n        uint32 _gasLimit\n    ) internal {\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _data, _gasLimit);\n    }\n}\n",
		"@eth-optimism/contracts/build/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iAbs_BaseCrossDomainMessenger\n */\ninterface iAbs_BaseCrossDomainMessenger {\n\n    /**********\n     * Events *\n     **********/\n    event SentMessage(bytes message);\n    event RelayedMessage(bytes32 msgHash);\n\n    /**********************\n     * Contract Variables *\n     **********************/\n    function xDomainMessageSender() external view returns (address);\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * Sends a cross domain message to the target messenger.\n     * @param _target Target contract address.\n     * @param _message Message to send to the target.\n     * @param _gasLimit Gas limit for the provided message.\n     */\n    function sendMessage(\n        address _target,\n        bytes calldata _message,\n        uint32 _gasLimit\n    ) external;\n}\n",
		"@eth-optimism/contracts/build/contracts/iOVM/precompiles/iOVM_ERC20.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\n\n/**\n * @title iOVM_ERC20\n */\ninterface iOVM_ERC20 {\n    /* This is a slight change to the ERC20 base standard.\n    function totalSupply() constant returns (uint256 supply);\n    is replaced with:\n    uint256 public totalSupply;\n    This automatically creates a getter function for the totalSupply.\n    This is moved to the base contract since public getter functions are not\n    currently recognised as an implementation of the matching abstract\n    function by the compiler.\n    */\n    /// total amount of tokens\n    function totalSupply() external view returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return balance The balance\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return success Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return remaining Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Mint(address indexed _account, uint256 _amount);\n    event Burn(address indexed _account, uint256 _amount);\n}\n",
		"@openzeppelin/contracts/utils/Address.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n",
		"bridge/utils/OpUnsafe.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps declare and check safe/unsafe calls to a function.\n *\n * Inheriting from `OpUnsafe` will make the {unsafe} and {safe} modifiers\n * available, which can be applied to functions to indicate safe or unsafe operations.\n * Private {_isUnsafe} function can be used to check if an unsafe operation is in progress,\n * which can be useful to disable some checks that are enabled by default.\n */\nabstract contract OpUnsafe {\n  /// @dev Indicates that we are doing an unsafe operation.\n  bool private s_unsafe;\n\n  /// @dev Modifier to declare an function as unsafe.\n  modifier unsafe() {\n    // Top level function call indicator\n    bool alreadyUnsafe = s_unsafe;\n\n    // Mark as unsafe only if top level function call\n    if (!alreadyUnsafe) {\n      s_unsafe = true;\n    }\n\n    _;\n\n    // Mark as safe only if top level function call\n    if (!alreadyUnsafe) {\n      s_unsafe = false;\n    }\n  }\n\n  /// @dev Modifier to require safe execution.\n  modifier safe() {\n    require(!s_unsafe, \"OpUnsafe: unsafe call\");\n\n    _;\n  }\n\n  /// @dev Returns true if and only if the function is running in unsafe mode\n  function _isUnsafe()\n    internal\n    view\n    returns (bool)\n  {\n    return s_unsafe;\n  }\n}\n"
	},
	"sourceTreeHashHex": "0x057e16002b18206302f37016b16abacc0f2aff0b76a6a7fbfebaee61d8e3252d",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 200,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": [
				"@openzeppelin/contracts=/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@openzeppelin/contracts",
				"@chainlink/contracts=/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@chainlink/contracts",
				"@eth-optimism/contracts=/Users/krebernisak/Documents/workspace/work/chainlink/code/link-token/LinkToken/node_modules/@eth-optimism/contracts"
			]
		}
	},
	"chains": {}
}